name: S3 Encryption Policy Demo

on:
  workflow_dispatch:
    inputs:
      cleanup:
        description: 'Cleanup resources after demo'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      
  pull_request:
    paths:
      - 'cedar_policies/s3-encryption-enforcement.cedar'
      - 'examples/cloudformation/*.yaml'
      - '.github/workflows/s3-encryption-demo.yml'

env:
  AWS_REGION: us-east-1
  STACK_PREFIX: cedar-demo-gha

jobs:
  validate-policies:
    name: Validate Cedar Policies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust and Cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cedar CLI Binary
        id: cache-cedar
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cedar
          key: ${{ runner.os }}-cedar-cli-4.4.1

      - name: Install Cedar CLI
        if: steps.cache-cedar.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cedar-policy-cli@4.4.1

      - name: Verify Cedar Installation
        run: cedar --version

      - name: Validate Cedar policies
        run: |
          echo "Validating Cedar policies..."
          for policy_file in cedar_policies/*.cedar; do
            if [ -f "$policy_file" ]; then
              echo "Validating $policy_file..."
              cedar validate --schema schema.cedarschema --policies "$policy_file"
            fi
          done


  shift-left-validation:
    name: Shift-Left - CloudFormation Validation
    runs-on: ubuntu-latest
    needs: validate-policies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust and Cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cedar CLI Binary
        id: cache-cedar
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cedar
          key: ${{ runner.os }}-cedar-cli-4.4.1

      - name: Install Cedar CLI
        if: steps.cache-cedar.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cedar-policy-cli@4.4.1

      - name: Verify Cedar Installation
        run: cedar --version

      - name: Validate CloudFormation templates
        run: |
          echo "üîç Validating CloudFormation templates for S3 encryption..."
          echo "========================================================"
          
          for template in examples/cloudformation/*.yaml; do
            echo ""
            echo "Checking: $template"
            
            # Check if template has encryption
            if grep -q "BucketEncryption:" "$template"; then
              algo=$(grep -A5 "BucketEncryption:" "$template" | grep "SSEAlgorithm:" | awk '{print $2}')
              echo "‚úÖ Has encryption: $algo"
              
              # Create Cedar entity for validation
              cat > /tmp/test-entity.json << EOF
          [
            {
              "uid": {"type": "S3Resource", "id": "test-bucket"},
              "attrs": {
                "name": "test-bucket",
                "encryption_enabled": true,
                "encryption_algorithm": "$algo",
                "environment": "development",
                "resource_type": "bucket"
              },
              "parents": []
            },
            {
              "uid": {"type": "Human", "id": "validator"},
              "attrs": {
                "role": "Developer",
                "team": "platform",
                "department": "engineering",
                "email": "validator@example.com"
              },
              "parents": []
            }
          ]
          EOF
              
              # Test with Cedar
              if cedar authorize \
                --policies cedar_policies/s3-encryption-enforcement.cedar \
                --schema schema.cedarschema \
                --entities /tmp/test-entity.json \
                --principal 'Human::"validator"' \
                --action 'Action::"s3:CreateBucket"' \
                --resource 'S3Resource::"test-bucket"' 2>/dev/null; then
                echo "‚úÖ Cedar validation: PASSED"
              else
                echo "‚ùå Cedar validation: FAILED"
              fi
            else
              echo "‚ùå No encryption found"
              echo "‚ùå Cedar validation: Would DENY bucket creation"
            fi
          done

  deploy-s3-buckets:
    name: Deploy S3 Buckets
    runs-on: ubuntu-latest
    needs: shift-left-validation
    permissions:
      id-token: write
      contents: read
    outputs:
      encrypted-bucket: ${{ steps.get-buckets.outputs.encrypted-bucket }}
      unencrypted-bucket: ${{ steps.get-buckets.outputs.unencrypted-bucket }}
      kms-bucket: ${{ steps.get-buckets.outputs.kms-bucket }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy encrypted S3 bucket
        id: deploy-encrypted
        run: |
          STACK_NAME="${{ env.STACK_PREFIX }}-encrypted-${{ github.run_number }}"
          echo "Deploying encrypted S3 bucket..."
          
          aws cloudformation deploy \
            --template-file examples/cloudformation/s3-encrypted-bucket.yaml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides BucketPrefix="${{ env.STACK_PREFIX }}-${{ github.run_number }}" \
            --no-fail-on-empty-changeset
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          
          echo "‚úÖ Created encrypted bucket: $BUCKET_NAME"
          echo "encrypted-bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Deploy unencrypted S3 bucket
        id: deploy-unencrypted
        run: |
          STACK_NAME="${{ env.STACK_PREFIX }}-unencrypted-${{ github.run_number }}"
          echo "Deploying unencrypted S3 bucket (non-compliant)..."
          
          aws cloudformation deploy \
            --template-file examples/cloudformation/s3-unencrypted-bucket.yaml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides BucketPrefix="${{ env.STACK_PREFIX }}-${{ github.run_number }}" \
            --no-fail-on-empty-changeset
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          
          echo "‚ùå Created unencrypted bucket: $BUCKET_NAME"
          echo "unencrypted-bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Deploy KMS-encrypted S3 bucket
        id: deploy-kms
        run: |
          STACK_NAME="${{ env.STACK_PREFIX }}-kms-${{ github.run_number }}"
          echo "Deploying KMS-encrypted S3 bucket..."
          
          aws cloudformation deploy \
            --template-file examples/cloudformation/s3-kms-encrypted-bucket.yaml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides BucketPrefix="${{ env.STACK_PREFIX }}-${{ github.run_number }}" \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          
          echo "‚úÖ Created KMS-encrypted bucket: $BUCKET_NAME"
          echo "kms-bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Save bucket names
        id: get-buckets
        run: |
          echo "encrypted-bucket=${{ steps.deploy-encrypted.outputs.encrypted-bucket }}" >> $GITHUB_OUTPUT
          echo "unencrypted-bucket=${{ steps.deploy-unencrypted.outputs.unencrypted-bucket }}" >> $GITHUB_OUTPUT
          echo "kms-bucket=${{ steps.deploy-kms.outputs.kms-bucket }}" >> $GITHUB_OUTPUT

  shift-right-compliance:
    name: Shift-Right - Runtime Compliance Check
    runs-on: ubuntu-latest
    needs: deploy-s3-buckets
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Rust and Cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cedar CLI Binary
        id: cache-cedar
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cedar
          key: ${{ runner.os }}-cedar-cli-4.4.1

      - name: Install Cedar CLI
        if: steps.cache-cedar.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cedar-policy-cli@4.4.1

      - name: Verify Cedar Installation
        run: cedar --version

      - name: Check encrypted bucket compliance
        run: |
          BUCKET="${{ needs.deploy-s3-buckets.outputs.encrypted-bucket }}"
          echo "üîç Checking encrypted bucket: $BUCKET"
          
          # Get encryption status
          ENCRYPTION=$(aws s3api get-bucket-encryption --bucket "$BUCKET" 2>/dev/null || echo "none")
          
          if [[ "$ENCRYPTION" != "none" ]]; then
            ALGO=$(echo "$ENCRYPTION" | jq -r '.Rules[0].ApplyServerSideEncryptionByDefault.SSEAlgorithm')
            echo "‚úÖ Encryption enabled: $ALGO"
            
            # Create Cedar entity
            cat > /tmp/bucket-entity.json << EOF
          [
            {
              "uid": {"type": "S3Resource", "id": "$BUCKET"},
              "attrs": {
                "name": "$BUCKET",
                "encryption_enabled": true,
                "encryption_algorithm": "$ALGO",
                "environment": "production",
                "resource_type": "bucket"
              },
              "parents": []
            },
            {
              "uid": {"type": "ConfigEvaluation", "id": "s3-bucket-server-side-encryption-enabled"},
              "attrs": {
                "rule_name": "s3-bucket-server-side-encryption-enabled",
                "evaluation_type": "shift-right",
                "compliance_status": "EVALUATING"
              },
              "parents": []
            }
          ]
          EOF
            
            # Check with Cedar
            if cedar authorize \
              --policies cedar_policies/s3-encryption-enforcement.cedar \
              --schema schema.cedarschema \
              --entities /tmp/bucket-entity.json \
              --principal 'ConfigEvaluation::"s3-bucket-server-side-encryption-enabled"' \
              --action 'Action::"config:EvaluateCompliance"' \
              --resource "S3Resource::\"$BUCKET\""; then
              echo "‚úÖ Cedar compliance check: COMPLIANT"
            else
              echo "‚ùå Cedar compliance check: NON-COMPLIANT"
            fi
          fi

      - name: Check unencrypted bucket compliance
        run: |
          BUCKET="${{ needs.deploy-s3-buckets.outputs.unencrypted-bucket }}"
          echo ""
          echo "üîç Checking unencrypted bucket: $BUCKET"
          
          # Check encryption (should fail)
          if aws s3api get-bucket-encryption --bucket "$BUCKET" 2>/dev/null; then
            echo "‚ö†Ô∏è  Unexpected: Bucket has encryption"
          else
            echo "‚ùå No encryption found (as expected)"
            
            # Create Cedar entity for non-compliant bucket
            cat > /tmp/bucket-entity.json << EOF
          [
            {
              "uid": {"type": "S3Resource", "id": "$BUCKET"},
              "attrs": {
                "name": "$BUCKET",
                "encryption_enabled": false,
                "environment": "production",
                "resource_type": "bucket"
              },
              "parents": []
            },
            {
              "uid": {"type": "ConfigEvaluation", "id": "s3-bucket-server-side-encryption-enabled"},
              "attrs": {
                "rule_name": "s3-bucket-server-side-encryption-enabled",
                "evaluation_type": "shift-right",
                "compliance_status": "EVALUATING"
              },
              "parents": []
            }
          ]
          EOF
            
            # Check with Cedar (should deny)
            if cedar authorize \
              --policies cedar_policies/s3-encryption-enforcement.cedar \
              --schema schema.cedarschema \
              --entities /tmp/bucket-entity.json \
              --principal 'ConfigEvaluation::"s3-bucket-server-side-encryption-enabled"' \
              --action 'Action::"config:EvaluateCompliance"' \
              --resource "S3Resource::\"$BUCKET\"" 2>/dev/null; then
              echo "‚ö†Ô∏è  Cedar compliance check: COMPLIANT (unexpected)"
            else
              echo "‚úÖ Cedar compliance check: NON-COMPLIANT (correct)"
            fi
          fi

      - name: Check KMS bucket compliance
        run: |
          BUCKET="${{ needs.deploy-s3-buckets.outputs.kms-bucket }}"
          echo ""
          echo "üîç Checking KMS-encrypted bucket: $BUCKET"
          
          # Get encryption status
          ENCRYPTION=$(aws s3api get-bucket-encryption --bucket "$BUCKET" 2>/dev/null || echo "none")
          
          if [[ "$ENCRYPTION" != "none" ]]; then
            ALGO=$(echo "$ENCRYPTION" | jq -r '.Rules[0].ApplyServerSideEncryptionByDefault.SSEAlgorithm')
            KMS_KEY=$(echo "$ENCRYPTION" | jq -r '.Rules[0].ApplyServerSideEncryptionByDefault.KMSMasterKeyID // ""')
            echo "‚úÖ Encryption enabled: $ALGO"
            if [[ -n "$KMS_KEY" ]]; then
              echo "‚úÖ KMS Key: $KMS_KEY"
            fi
          fi

  demo-summary:
    name: Demo Summary
    runs-on: ubuntu-latest
    needs: [shift-right-compliance, deploy-s3-buckets]
    if: always()
    steps:
      - name: Print summary
        run: |
          echo "# üéØ S3 Encryption Policy Demo Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Shift-Left Validation (CloudFormation)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Templates with encryption: **PASSED** validation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå Templates without encryption: **FAILED** validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed S3 Buckets" >> $GITHUB_STEP_SUMMARY
          echo "- ü™£ Encrypted bucket: \`${{ needs.deploy-s3-buckets.outputs.encrypted-bucket }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- ü™£ Unencrypted bucket: \`${{ needs.deploy-s3-buckets.outputs.unencrypted-bucket }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- ü™£ KMS bucket: \`${{ needs.deploy-s3-buckets.outputs.kms-bucket }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Shift-Right Compliance (Runtime)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Encrypted buckets: **COMPLIANT**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå Unencrypted bucket: **NON-COMPLIANT**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîë Key Takeaway" >> $GITHUB_STEP_SUMMARY
          echo "The same Cedar policy enforced S3 encryption at both:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Development time** (CloudFormation validation)" >> $GITHUB_STEP_SUMMARY
          echo "2. **Runtime** (actual S3 bucket compliance)" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [demo-summary, deploy-s3-buckets]
    if: always() && inputs.cleanup == 'true'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Empty and delete S3 buckets
        run: |
          echo "üßπ Cleaning up S3 buckets..."
          
          # Function to safely delete bucket
          delete_bucket() {
            local bucket=$1
            if [[ -n "$bucket" ]] && aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
              echo "Deleting bucket: $bucket"
              aws s3 rm "s3://$bucket" --recursive 2>/dev/null || true
              aws s3 rb "s3://$bucket" --force 2>/dev/null || true
            fi
          }
          
          # Delete all demo buckets
          delete_bucket "${{ needs.deploy-s3-buckets.outputs.encrypted-bucket }}"
          delete_bucket "${{ needs.deploy-s3-buckets.outputs.unencrypted-bucket }}"
          delete_bucket "${{ needs.deploy-s3-buckets.outputs.kms-bucket }}"

      - name: Delete CloudFormation stacks
        run: |
          echo "üóëÔ∏è Deleting CloudFormation stacks..."
          
          # Delete all stacks with our prefix
          STACKS=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "StackSummaries[?starts_with(StackName, '${{ env.STACK_PREFIX }}')].StackName" \
            --output text)
          
          for stack in $STACKS; do
            echo "Deleting stack: $stack"
            aws cloudformation delete-stack --stack-name "$stack"
          done
          
          echo "‚úÖ Cleanup initiated"